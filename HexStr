package com.bsj.common.bytes;

/**
 * 
* @ClassName: HexStr
* @Description: 16进制的字符与内存互转
*
 */
public class HexStr {
	private static byte uniteBytes(String src0, String src1) {
		byte b0 = Byte.decode("0x" + src0).byteValue();
		b0 = (byte) (b0 << 4);
		byte b1 = Byte.decode("0x" + src1).byteValue();
		byte ret = (byte) (b0 | b1);
		return ret;
	}

	static public byte[] toArray(String src) {
		int m = 0, n = 0;
		int l = src.length() / 2;
		byte[] ret = new byte[l];
		for (int i = 0; i < l; i++) {
			m = i * 2 + 1;
			n = m + 1;
			ret[i] = uniteBytes(src.substring(i * 2, m), src.substring(m, n));
		}
		return ret;
	}

	static public String toStr(byte[] arr) {
		if (arr == null) {
			return null;
		}
		return toStr(arr, 0, arr.length);
	}

	static public String toStr(byte[] b, int offset, int len) {
		if (b == null) {
			return null;
		}
		String hs = "";
		String stmp = "";
		if (offset + len > b.length) {
			len = b.length - offset;
		}
		for (int n = offset; n < offset + len; n++) {
			stmp = (Integer.toHexString(b[n] & 0xFF));
			if (stmp.length() == 1)
				hs = hs + "0" + stmp;
			else
				hs = hs + stmp;
		}
		return hs.toUpperCase();
	}
}
